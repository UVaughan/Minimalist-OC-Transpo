@page "/"
@inject NavigationManager NavigationManager
@inject BusStopService BusStopService

<div class="jumbotron">
    <h1 class="display-4">Minimalist OC Transpo App</h1>
</div>
<div class="input-group mb-3">
    <input type="search"
           class="form-control"
           placeholder="Search by name or stop number..."
           aria-label="Search"
           aria-describedby="basic-addon1"
           @bind-value="searchTerm"
           @bind-value:event="oninput" />

</div>
@if (filtered != null)
{
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th scope="col">Stop #</th>
            <th scope="col">Description</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var key in display)
            {
        <tr>
            <th scope="row" style="width:100px;">@key.ToString()</th>
            <td><NavLink href="@String.Format("stops/{0}", key.ToString())">@(BusStopService.IsStation(key) ? BusStopService.GetStation(key) : stops[key].FormatStopName())</NavLink></td>
        </tr>
            }
    </tbody>
</table>
@if (display.Count() < filtered.Count())
    {
<button type="button" class="btn btn-outline-dark" onclick="@(new Action(() => LoadMore()))">Load More</button>
    }
}
else
{
<p><em>No results found</em></p>
}

@code {
    public const int incrementNumber = 10;

    private int currentSize = 66;

    public IDictionary<int, string> stops;

    private string searchTerm { get; set; } = "";

    public IEnumerable<int> filtered => stops.Where(pair =>
    {
        // first check if stop number matches
        if (pair.Key.ToString().Contains(searchTerm))
        {
            return true;
        }

        var terms = searchTerm.Split(' ');
        foreach (var term in terms)
        {
            if (!pair.Value.FormatStopName().ToLower().RemoveFrenchCharacters().Contains(term.ToLower().RemoveFrenchCharacters()))
            {
                return false;
            }
        }
        return true;
    }).Select(x => x.Key);

    public IEnumerable<int> display => filtered.Take(currentSize);

    protected override async Task OnInitializedAsync()
    {
        stops = BusStopService.GetAllStops();
    }

    private void LoadMore()
    {
        var incAmount = ((display.Count() + incrementNumber) > stops.Keys.Count()) ? (stops.Keys.Count() - display.Count()) : incrementNumber;
        currentSize += incAmount;
    }
}
