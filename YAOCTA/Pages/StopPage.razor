@page "/stops/{stopNumber:int}"
@inject NavigationManager NavigationManager
@inject BusStopService BusStopService

@if (stop == null)
{
    <p><em>@state</em></p>
}
else
{
    <div class="jumbotron">
        <h1 class="display-4">@GetStopName()</h1>
        <button type="button" class="btn btn-outline-dark" onclick="@(new Action(() => Back()))">Back</button>
        <button type="button" class="btn btn-outline-dark" disabled="@refreshing" onclick="@(new Action(async () => await RefreshStop()))">Refresh</button>
    </div>

    @if (GetDuplicates().Count > 0)
    {
        <div style="padding-bottom: 20px;">
            <h4>
                <b>
                    Other stops at this location
                </b>
            </h4>
            @foreach (var duplicate in GetDuplicates())
            {
                <button type="button" class="btn btn-outline-dark" onclick="@(new Action(async () => await SwitchStops(duplicate)))">@duplicate.ToString()</button>
            }
        </div>
    }

    @if (stop.Routes.Route.Count == 0)
    {
        <p><em>No service</em></p>
    }
    else
    {
        <div class="row">
            <div class="card-columns">
                @foreach (var route in stop.Routes.Route
                    .Where(x => x != null && x.Trips.Count > 0)
                    .OrderBy(x => Int32.TryParse(x.RouteNo, out var result) ? result : 0))
                {

                    <div class="card">
                        <div class="card-header">
                            <b>@route.RouteNo</b> to @route.RouteHeading
                        </div>
                        <div class="card-body">
                            <ul class="list-group">
                                @foreach (var trip in route.Trips)
                                {
                                    <li class="list-group-item">@GetTripMessage(trip, (route.RouteNo == "1" || route.RouteNo == "2") ? VehicleType.Train : VehicleType.Bus)</li>
                                }
                            </ul>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}
@code {
    [Parameter]
    public int stopNumber { get; set; }

    public BusStop stop;

    public string state = "Loading data...";

    private const string ShortBus = "Single bus";
    private const string LongBus = "Stretch bus";
    private const string TallBus = "Double decker";
    private const string Unknown = "Unknown";

    public bool refreshing = false;

    private IList<int> GetDuplicates() => BusStopService.GetDuplicates(GetStopName()).Where(x => x != stopNumber).Distinct().ToList();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            stop = await BusStopService.GetStopInfo(stopNumber);
        }
        catch (Exception e)
        {
            state = "Could not reach OC Transpo servers";
        }
    }

    private async Task RefreshStop()
    {
        refreshing = true;
        try
        {
            stop = await BusStopService.GetStopInfo(stopNumber);
            refreshing = false;
            this.StateHasChanged();
        }
        catch (Exception e)
        {
            refreshing = false;
            this.StateHasChanged();
        }
    }

    private string GetStopName() =>
        BusStopService.IsStation(stopNumber) ? BusStopService.GetStation(stopNumber) : stop.StopDescription.FormatStopName();

    private void Back()
    {
        NavigationManager.NavigateTo(NavigationManager.BaseUri);
    }

    private async Task SwitchStops(int stopNumber)
    {
        NavigationManager.NavigateTo(String.Format("{0}stops/{1}", NavigationManager.BaseUri, stopNumber));
        this.stopNumber = stopNumber;
        await RefreshStop();
    }

    // TODO: Move below methods to other classes
    public string GetTripMessage(Trip trip, VehicleType vehicleType)
    {
        var arrivalTime = GetArrivalTime(trip);
        // TODO: refactor this for readability
        return (vehicleType == VehicleType.Train ? "Train" : GetBusType(trip)) + " " +
            ((arrivalTime <= 0) ?
            "arriving now" :
            (arrivalTime.ToString() + " minute" + (arrivalTime == 1 ? "" : "s") + " away"
            + ((trip.AdjustmentAge != "-1" && trip.GPSSpeed != "") ? (" by GPS, moving at " + trip.GPSSpeed + " kph") : "")));
    }

    public int GetArrivalTime(Trip trip)
    {
        var adjusted = Int32.Parse(trip.AdjustedScheduleTime);
        var age = Convert.ToDecimal(trip.AdjustmentAge, CultureInfo.CurrentCulture);
        if (age < 0)
        {
            return adjusted;
        }
        var arrivalTime = adjusted - age;
        return (int)Math.Round(arrivalTime);
    }

    public string GetBusType(Trip trip)
    {
        if (trip.BusType.Length == 0)
        {
            return Unknown;
        }
        switch (trip.BusType[0])
        {
            case '4':
                return trip.BusType.Contains("DD") ? TallBus : ShortBus;
            case '6':
                return LongBus;
            case 'D':
                return TallBus;
            default:
                return trip.BusType.Contains("DD") ? TallBus : Unknown;
        }
    }

    public enum VehicleType { Train, Bus }
}
